#!/usr/bin/env bash
set -ue



# fun: print-usage
# txt: print acbuild-template usage info
function print-usage() {
	cat <<EOF
acbuild-template, make acbuild-scripts more declarative

Usage:	
  acbuild-template help
  acbuild-template script    [<template>[target script]]
  acbuild-template build     [<template>[<target image>]]
  acbuild-template install   [<template>]
  acbuild-template run       [<template>] [<rtk run args> ... ]
  acbuild-template upload bitbucket <username> <repo>
  acbuild-template upload github    <username> <repo>

Environment:

  ACBUILD_SCRIPT
  ACBUILD_IMAGE_DIR_NAME
  ACBUILD_IMAGE_MODE
  ACBUILD_IMAGE_VERSION
  ACBUILD_IMAGE_OS
  ACBUILD_IMAGE_ARCH
  ACBUILD_IMAGE_EXT
  ACBUILD_RUN_INSECURE
  ACBUILD_RUN_ENGINE
  ACBUILD_IMAGE_BASE_NAME
  ACBUILD_IMAGE
  ACBUILD_CACHE_DIR

  ACBUILD
  ACBUILD_OPTS

  RKT
  RKT_OPTS
  RKT_FETCH_OPTS
  RKT_RUN_OPTS

EOF
}

# todo curl -u {{username}} -X POST https://api.bitbucket.org/2.0/repositories/{{username}}/{{repo}}/downloads -F files=@{filename}


# fun: check-non-empty-arguments [ arg1 [ arg2 [...] ] ]
# txt: return 0 if empty arguments, otherwise 1
function check-non-empty-arguments() {
	if [[ -z "${1+x}" ]]; then
		echo "debug: arguments are $@"
		echo 'arguments expected, see acbuild-scripter help'
		print-usage
		return 1
	fi
}


# fun: errcho msg1 msg2 msg3 ..
# txt: print arguments to stderr
function errcho() {
	>&2 echo "$@"
}


function errxit() {
	errcho "$@"
	exit 1
}


# fun: value arg
# txt: if arg is nonempty print it, otherwise return error
function arg-value() {
	[[ -n "${1:-}" ]] && echo "$1" || return 1
}


# fun: echo <MULTILINE> | last-line
# txt: built-in equivalent of 'tail -n 1'
function last-line() {
	local value
	read -d '' value
	echo "${value##*$'\n'}"
}


# fun: cat value | stream-value
# txt: if stdin is nonempty print it, otherwise return error
function stream-value() {
	local value
	read -d '' value
	arg-value "$value"
}


function parse-mode() {
	sed -ne 's/^\s*begin\s.*--build-mode=\([^{} ]*\)\(\s.*\)\?$/\1/gp' | last-line | stream-value
}


# fun: cat acbuild-script | parse-name
# txt: parse acbuld-script and get image name (value ignored if contains placeholders)
function parse-name() {
	sed -ne 's/^\s*set-name\s\+\([^{} ]*\?\)\s*$/\1/gp' | last-line | stream-value
}


# fun: cat acbuild-script | parse-label <LABEL>
# txt: parse acbuld-script and get label value (value ignored if contains placeholders)
function parse-label() {
	sed -ne "s/^\s*label\s\+add\s\+$1\s\+\([^{} ]*\?\)\s*$/\1/gp" | last-line | stream-value
}


# fun: cat acbuild-script |   parse-oputout
# txt: parse acbuld-script and get image version (value ignored if contains placeholders)
function parse-output() {
	sed -ne 's/^\s*write\s\+\(--overwrite\s\+\)\?\([^{} ]*\?\)\s*$/\2/gp' | last-line | stream-value
}

#
function get-cache-dir() {
	echo "${cache_dir:-${ACBUILD_CACHE_DIR:-$(${MKTEMP:-mktemp} -d)}}"
}

#
function get-script() {
	arg-value "${1:-}" || arg-value "${ACBUILD_SCRIPT:-}" || echo 'acbuild-script'
}


# env: cache_dir
function get-dir-name() {
	arg-value "${ACBUILD_IMAGE_DIR_NAME:-}" || echo "$cache_dir"
}


# fun: mode-to-ext <MODE>
# txt: appc->aci, oci->oci
function mode-to-ext() {
	if   [[ appc == "${1:-}" ]]; then
		echo aci
	elif [[ oci == "${1:-}" ]]; then
		echo oci
	else
		return 1
	fi
}

# fun ext-to-mode <EXT>
# txt: aci->appc, oci->oci
function ext-to-mode() {
	if   [[ aci == "${1:-}" ]]; then
		echo appc
	elif [[ oci == "${1:-}" ]]; then
		echo oci
	else
		return 1
	fi
}

function get-mode() {
	parse-mode || arg-value "${ACBUILD_IMAGE_MODE:-}" || ext-to-mode "${ext:-}" || echo appc
}


# fun: get-name
# txt: 
# env: script: acbuild-script or template which must exist
#      name:   name if already known
function get-name() {
	parse-name || arg-value "$ACBUILD_IMAGE_NAME" || arg-value "$(basename $(pwd))" || echo image
}


# fun: get-version
# txt: 
# env: ACBUILD_IMAGE_VERSION
function get-version() {
	parse-label version || arg-value "${ACBUILD_IMAGE_VERSION:-}" || cat VERSION 2> /dev/null || echo snapshot
}


# env: ACBUILD_IMAGE_OS
function get-os() {
	parse-label os || arg-value "${ACBUILD_IMAGE_OS:-}" || uname | tr '[:upper:]' '[:lower:]' || echo unknown
}


# env: ACBUILD_IMAGE_ARCH
function get-arch() {
	parse-label arch \
			|| arg-value "${ACBUILD_IMAGE_ARCH:-}" \
			|| uname -m | sed -e "s/^\(x64\|x86_64\)$/amd64/g" | tr "[:upper:]" "[:lower:]" \
			|| echo unknown
}


# env: ACBUILD_IMAGE_EXT
function get-ext() {
	arg-value "${ACBUILD_IMAGE_EXT:-}" || mode-to-ext "${mode:-}" || echo 'aci'
}

function get-insecure() {
	arg-value "${ACBUILD_RUN_INSECURE:-}" || echo 'false'
}

function get-engine() {
	arg-value "${ACBUILD_RUN_ENGINE:-}" || echo 'systemd-nspawn'
}

# fun: echo '/.-' | sanitize
# txt: replace /._ with underscore
function sanitize() {
	local value
	read -d '' value
	value=${value//-/_}
	value=${value//\//_}
	value=${value//./_}
	echo "$value"
}

# env: name:
#      version:
#      os:
#      arch:
#      ext:
function get-base-name() {
	arg-value "${ACBUILD_IMAGE_BASE_NAME:-}" \
			|| echo "$(echo $name | sanitize)-$version-$os-$arch.$ext"
}



# fun: cat <TEMPLATE> | apply-template
# env: dir_name
#      mode:
#      name:
#      version:
#      os:
#      arch:
#      ext:
#      base_name:
#      output: 
function apply-template() {
	local value
	read -d '' value
	value=${value//\{\{dir-name\}\}/$dir_name}
	value=${value//\{\{mode\}\}/$mode}
	value=${value//\{\{name\}\}/$name}
	value=${value//\{\{version\}\}/$version}
	value=${value//\{\{os\}\}/$os}
	value=${value//\{\{arch\}\}/$arch}
	value=${value//\{\{ext\}\}/$ext}
	value=${value//\{\{base-name\}\}/$base_name}
	value=${value//\{\{insecure\}\}/$insecure}
	value=${value//\{\{engine\}\}/$engine}
	value=${value//\{\{output\}\}/$output}
	echo "$value"
}


# fun: get-output
# env: dir_name
#      name:
#      version:
#      os:
#      arch:
#      ext:
#      base_name:
function get-output() {
	parse-output \
			|| echo "${1:-}"             | stream-value | output="$dir_name/$base_name" apply-template | stream-value \
			|| echo "${ACBUILD_IMAGE:-}" | stream-value | output="$dir_name/$base_name" apply-template | stream-value \
			|| echo "$dir_name/$base_name"
}




# fun: cat script-template | process-script
# txt: 
function process-template {
	data=$(stream-value) || return $?

	cache_dir=$(get-cache-dir)
	local dir_name=$(                get-dir-name)
	local mode=$(     echo "$data" | get-mode)
	local name=$(     echo "$data" | get-name)
	local version=$(  echo "$data" | get-version)
	local os=$(       echo "$data" | get-os)
	local arch=$(     echo "$data" | get-arch)
	local ext=$(      echo "$data" | get-ext)
	local base_name=$(               get-base-name)
	local insecure=$(                get-insecure)
	local engine=$(                  get-engine)
	local output=$(   echo "$data" | get-output "${2:-}")

	
	# resolve placeholders inside variables
	# due to transitive dependencies up to 8 iteration needed, usually none
	for i in 1 2 3 4 5 6 7 8 9; do
		if [[ "$dir_name$mode$name$version$os$arch$ext$base_name$output" != *"{{"* ]]; then
			break
		elif [[ $i == 9 ]]; then
			errcho "unable to resolve placeholders, values are:
    dir_name:  $dir_name
    mode:      $mode
    name:      $name
    version:   $version
    os:        $os
    arch:      $arch
    ext:       $ext
    base_name: $base_name
    output:    $output"
			return 1
		fi

		dir_name=$(  echo "$dir_name"  | apply-template)
		mode=$(      echo "$mode"      | apply-template)
		name=$(      echo "$name"      | apply-template)
		version=$(   echo "$version"   | apply-template)
		os=$(        echo "$os"        | apply-template)
		arch=$(      echo "$arch"      | apply-template)
		ext=$(       echo "$ext"       | apply-template)
		base_name=$( echo "$base_name" | apply-template)
		output=$(    echo "$output"    | apply-template)
	done

	echo -n "$data" | apply-template

}


function get-file-content() {
	if [[ -z "${1:-}" ]]; then
		errcho "file not set"
		return 1
	fi
	local file_name="$1"
	if [[ ! -f "$file_name" ]]; then
		local message="${2:-file '$file_name' not found}"
		errxit "$message"
	fi
	cat "$file_name"
}


# fun: apply [<script>[<destination>]]
function apply() {
	[[ -n "${3:-}" ]] && errxit 'too many arguments'

	local script=$(get-script "${1:-}") 
	local script_data=$(get-file-content "$script" "script '$script' not found") #|| errxit "script $script not found"
	
	# write script
	if [[ -z "${2:-}" ]] || [[ _- == "_${2:-}" ]] ; then
		echo -n "$script_data" | process-template
	else
		echo -n "$script_data" | process-template > "$2"
	fi
}


# fun: build [<script>]
# env: SCRIPT
function build() {

	local cache_dir=$(get-cache-dir)
	local script_data=$(apply "${1:-}")
	local output=$(   echo "$script_data" | get-output "${2:-}")
	mkdir -p "$(dirname '$output')" "$cache_dir"
	echo "$script_data" > "$cache_dir/acbuild-script"

	# run acbuild
	local stdout="$cache_dir/acbuild-script.stdout.log"
	local stderr="$cache_dir/acbuild-script.stderr.log"

	#
	: ${ACBUILD:=acbuild}
	: ${ACBUILD_OPTS:=}
	if [[ "$ACBUILD_OPTS" != *--work-path* ]]; then
		ACBUILD_OPTS="$ACBUILD_OPTS --work-path '$cache_dir'"
	fi
	
	# call acbuild to build image
	rm -rf "$cache_dir/.acbuild"
	local command="'$ACBUILD' $ACBUILD_OPTS script $cache_dir/acbuild-script"
	if eval "$command" > "$stdout" 2> "$stderr"; then
		echo "$output"
	else
		local code=$?
		errcho "error running command: $command"
		errcho "the script was: "
		>&2 cat "$cache_dir/acbuild-script"
		if [[ -f "$stdout" ]]; then cat "$stdout" >&2; fi
		if [[ -f "$stderr" ]]; then cat "$stderr" >&2; fi
		return $code
	fi

}



# fun: install script
function install() {
	# 
	: ${RKT:=rkt}
	: ${RKT_OPTS:=}
	: ${RKT_FETCH_OPTS:=}

	if [[ "$RKT_OPTS" != *--insecure-options* ]]; then
		RKT_OPTS="$RKT_OPTS --insecure-options=image"
	fi

	if [[ "$RKT_FETCH_OPTS" != *--full* ]]; then
		RKT_FETCH_OPTS="$RKT_FETCH_OPTS --full"
	fi

	# build image
	image=$(build "${1:-}")
	real_image=$(realpath "$image")

	#
	cache_dir=${cache_dir:-${ACBUILD_CACHE_DIR:-$(${MKTEMP:-mktemp} -d)}}
	mkdir -p "$cache_dir"
	local stdout="$cache_dir/rkt-fetch.stdout.log"
	local stderr="$cache_dir/rkt-fetch.stderr.log"

	if eval "'$RKT' $RKT_OPTS fetch $RKT_FETCH_OPTS 'file://$real_image'" > "$stdout" 2> "$stderr"; then
		cat "$stdout" | last-line
	else
		local code=$?
		if [[ -f "$stdout" ]]; then cat "$stdout" >&2; fi
		if [[ -f "$stderr" ]]; then cat "$stderr" >&2 ; fi
		return $code
	fi
	
}



function run() {

	: ${RKT:=rkt}
	: ${RKT_OPTS:=}
	: ${RKT_RUN_OPTS:=}

	if [[ "$RKT_OPTS" != *--insecure-options* ]]; then
		RKT_OPTS="$RKT_OPTS --insecure-options=all"
	fi
	
	local image_hash
	if [[ _-* == "_${1:-}" ]]; then
		image_hash=$(install)
	else
		image_hash=$(install "${1:-}")
		shift
	fi
	image_hash=123

	eval "'$RKT' $RKT_OPTS run '$image_hash' $RKT_RUN_OPTS ""$@"
}



function main() {

	check-non-empty-arguments "$@"

	cache_dir=

	# if help requested
	if [[ help == "$1" ]] || [[ _--help == "_$1" ]] || [[ _-h == "_$1" ]] || [[ _-? == "_$1" ]]; then
		echo "$USAGE"
		return 0
	fi

	if   [[ apply   == "${1:-}" ]]; then
		shift
		apply "$@" || return $?
	elif   [[ build   == "${1:-}" ]]; then
		shift
		build "$@" || return $?

	elif [[ install == "${1:-}" ]]; then
		shift
		install "$@" || return $?

	elif [[ run     == "${1:-}" ]]; then
		shift
		run "$@" || return $?

	else
		echo "unknown command '${1:-}', see acbuild-scripter help"
	fi
}



if [[ _acbuild-template == _$(basename "$0") ]]; then
	main "$@"
fi

